generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model internships {
  id                   Int          @id @default(autoincrement())
  company              String       @db.VarChar(255)
  role                 String       @db.VarChar(255)
  location             String       @db.VarChar(255)
  date_posted          DateTime     @db.Date
  apply_link           String
  created_by           String?
  open_for_application Boolean
  users                User?       @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  join_table           join_table[]
}

model join_table {
  id            Int                @id @default(autoincrement())
  user_id       String?
  internship_id Int?
  status        application_status
  date_applied  DateTime?          @db.Date
  internships   internships?       @relation(fields: [internship_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         User?             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, internship_id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  internships internships[]
  join_table  join_table[]
}

model Account {
  userId           String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  
}

model Session {
  sessionToken String   @unique
  userId      String
  expires      DateTime
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum application_status {
  Closed
  Pending
  Interviewed
  Hired
  Hidden
  Saved
}
